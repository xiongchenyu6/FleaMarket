ebean.default=["models.*"]
db {
  default {
    driver = com.mysql.cj.jdbc.Driver
    url = "jdbc:mysql://127.0.0.1:3306/test?useEncode=true&characterEncoding=utf-8&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"
    username = "root"
    password = ""
  }
}
play {
  ws.ssl.loose.acceptAnyCertificate=true
  server.akka.http2 {
    enabled = true
    enabled = ${?http2.enabled}
  }
  # Supported languages (i18n)
  i18n.langs = ["en", "zh-CN"]
  # Register the user modules
  modules {
    enabled += "play.filters.csrf.CSRFModule"
    enabled += "play.filters.cors.CORSModule"
    enabled += "play.filters.headers.SecurityHeadersModule"
    enabled += "play.filters.hosts.AllowedHostsModule"
    enabled += "play.filters.gzip.GzipFilterModule"
    enabled += "play.filters.https.RedirectHttpsModule"
  }
  filters {
    enabled += "play.filters.csrf.CSRFFilter"
    enabled += play.filters.headers.SecurityHeadersFilter
    enabled += play.filters.hosts.AllowedHostsFilter
    # CSRF config
    csrf {

      # Token configuration
      token {
        # The token name
        name = "csrfToken"

        # Whether tokens should be signed or not
        sign = true
      }

      # Cookie configuration
      cookie {
        # If non null, the CSRF token will be placed in a cookie with this name
        name = null

        # Whether the cookie should be set to secure
        secure = ${play.http.session.secure}

        # Whether the cookie should have the HTTP only flag set
        httpOnly = false
      }

      # How much of the body should be buffered when looking for the token in the request body
      body.bufferSize = ${play.http.parser.maxMemoryBuffer}

      # Bypass the CSRF check if this origin is trusted by the CORS filter
      bypassCorsTrustedOrigins = true

      # Header configuration
      header {

        # The name of the header to accept CSRF tokens from.
        name = "Csrf-Token"


        # Defines headers that must be present to perform the CSRF check. If any of these headers are present, the CSRF
        # check will be performed.
        #
        # By default, we only perform the CSRF check if there are Cookies or an Authorization header.
        # Generally, CSRF attacks use a user's browser to execute requests on the client's behalf. If the user does not
        # have an active session, there is no danger of this happening.
        #
        # Setting this to null or an empty object will protect all requests.
        protectHeaders {
          Cookie = "*"
          Authorization = "*"
        }

        # Defines headers that can be used to bypass the CSRF check if any are present. A value of "*" simply
        # checks for the presence of the header. A string value checks for a match on that string.
        bypassHeaders {}
      }

      # Method lists
      method {
        # If non empty, then requests will be checked if the method is not in this list.
        whiteList = ["GET", "HEAD", "OPTIONS"]

        # The black list is only used if the white list is empty.
        # Only check methods in this list.
        blackList = []
      }

      # Content type lists
      # If both white lists and black lists are empty, then all content types are checked.
      contentType {
        # If non empty, then requests will be checked if the content type is not in this list.
        whiteList = []

        # The black list is only used if the white list is empty.
        # Only check content types in this list.
        blackList = []
      }

      routeModifiers {
        # If non empty, then requests will be checked if the route does not have this modifier. This is how we enable the
        # nocsrf modifier, but you may choose to use a different modifier (such as "api") if you plan to check the
        # modifier in your code for other purposes.
        whiteList = ["nocsrf"]

        # If non empty, then requests will be checked if the route contains this modifier
        # The black list is used only if the white list is empty
        blackList = []
      }

      # The error handler.
      # Used by Play's built in DI support to locate and bind a request handler.  Must be one of the following:
      # - A FQCN that implements play.filters.csrf.CSRF.ErrorHandler (Scala).
      # - A FQCN that implements play.filters.csrf.CSRFErrorHandler (Java).
      # - provided, indicates that the application has bound an instance of play.filters.csrf.CSRF.ErrorHandler through some
      #   other mechanism.
      # If null, will attempt to load a class called CSRFErrorHandler in the root package, otherwise if that's
      # not found, will default to play.filters.csrf.CSRF.CSRFHttpErrorHandler, which delegates to the configured
      # HttpRequestHandler.
      errorHandler = null
    }


    # Security headers filter configuration
    headers {

      # The X-Frame-Options header. If null, the header is not set.
      frameOptions = "DENY"

      # The X-XSS-Protection header. If null, the header is not set.
      xssProtection = "1; mode=block"

      # The X-Content-Type-Options header. If null, the header is not set.
      contentTypeOptions = "nosniff"

      # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
      permittedCrossDomainPolicies = "master-only"

      # The Content-Security-Policy header. If null, the header is not set.

      contentSecurityPolicy = "default-src 'self';"
      contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data: *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
      contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
      contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' data: fonts.gstatic.com fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
      contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com;"
      contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
      contentSecurityPolicy = null
      # The Referrer-Policy header. If null, the header is not set.
      #referrerPolicy = "origin-when-cross-origin, strict-origin-when-cross-origin"
      referrerPolicy = null
      # If true, allow an action to use .withHeaders to replace one or more of the above headers
      allowActionSpecificHeaders = false
    }

    # Allowed hosts filter configuration
    hosts {

      # A list of valid hosts (e.g. "example.com") or suffixes of valid hosts (e.g. ".example.com")
      # Note that ".example.com" will match example.com and any subdomain of example.com, with or without a trailing dot.
      # "." matches all domains, and "" matches an empty or nonexistent host.
      allowed = ["localhost", ".local", "."]
    }
    cors {
      # allow all paths
      #pathPrefixes = ["/"]
      # allow all origins (You can specify if you want)
      #allowedOrigins = null
      allowedHttpMethods = ["GET", "POST", "PUT", "DELETE"]
      # allow all headers
      allowedHttpHeaders = null
    }
  }

  http {

    # Session configuration
    session = {

      # The cookie name
      cookieName = "PLAY_SESSION"

      # Whether the secure attribute of the cookie should be set to true
      secure = false

      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = null

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true

      # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      sameSite = null

      # The domain to set on the session cookie
      # If null, does not set a domain on the session cookie.
      domain = null

      # The session path
      # Must start with /.
      path = ${play.http.context}

      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = ${play.http.session.maxAge}

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this value.
        clockSkew = 5 minutes

        # The claim key under which all user data is stored in the JWT.
        dataClaim = "data"
      }
    }

    parser {
      maxDiskBuffer = 20MB
      maxMemoryBuffer = 20MB
    }
    secret.key = "G7RrP=9A?gpC1Z1wx:QBuNVp@LUd<MmHY8>1]T<GLK0yuSj]v[8r:sB;7TSuS5OH"
    #  errorHandler = modules.ErrorHandler
  }
  # HTTPS configuration
  https {

    # The HTTPS port of the server.
    port = ${?https.port}

    # The interface address to bind to
    address = "0.0.0.0"
    address = ${?https.address}

    # The idle timeout for an open connection after which it will be closed
    # Set to null or "infinite" to disable the timeout, but notice that this
    # is not encouraged since timeout are important mechanisms to protect your
    # servers from malicious attacks or programming mistakes.
    idleTimeout = ${play.server.http.idleTimeout}

    # The SSL engine provider
    engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
    engineProvider = ${?play.http.sslengineprovider}

    # HTTPS keystore configuration, used by the default SSL engine provider
    keyStore {
      # The path to the keystore
      path = ${?https.keyStore}

      # The type of the keystore
      type = "JKS"
      type = ${?https.keyStoreType}

      # The password for the keystore
      password = ""
      password = ${?https.keyStorePassword}

      # The algorithm to use. If not set, uses the platform default algorithm.
      algorithm = ${?https.keyStoreAlgorithm}
    }

    # HTTPS truststore configuration
    trustStore {

      # If true, does not do CA verification on client side certificates
      noCaVerification = false
    }

    # Whether JSSE want client auth mode should be used. This means, the server
    # will request a client certificate, but won't fail if one isn't provided.
    wantClientAuth = false

    # Whether JSSE need client auth mode should be used. This means, the server
    # will request a client certificate, and will fail and terminate the session
    # if one isn't provided.
    needClientAuth = false
  }

  # The path to the process id file created by the server when it runs.
  # If set to "/dev/null" then no pid file will be created.
  pidfile.path = ${play.server.dir}/RUNNING_PID
  pidfile.path = ${?pidfile.path}

  websocket {
    # Maximum allowable frame payload length. Setting this value to your application's
    # requirement may reduce denial of service attacks using long data frames.
    frame.maxLength = 64k
    frame.maxLength = ${?websocket.frame.maxLength}
  }
  assets.checkForMinified = false
}

application {
  #base_url = ""
  base_url = "http://localhost:9000"
}
# Evolutions
# ~~~~~
# You can disable evolutions if needed
 play.evolutions.enabled=true
 play.evolutions.autoApply=true
 play.evolutions.autoApplyDowns=true

parsers.anyContent.maxLength = 20MB

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error = off
  default-dispatcher.core-pool-size-max = 32
  debug.receive = on
}

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}
